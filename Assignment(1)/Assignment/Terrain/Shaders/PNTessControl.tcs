#version 450 core
layout (vertices =1) out;

float GetTessLevel(float dist1, float dist2) ;
void CalcPositions();
vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal) ;
vec3 getNormal(vec3 a, vec3 b, vec3 c) ;


in vec3 WorldPos_CS_in[];
in vec3 eye[] ;
in vec3 normals[] ;

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec3 tc_norms[3];
};

// attributes of the output CPs
out patch OutputPatch oPatch;

uniform float lambda;
uniform float alpha;

void main()
{

  // vec3 n = getNormal(WorldPos_CS_in[0].xyz,WorldPos_CS_in[1].xyz,WorldPos_CS_in[2].xyz) ;


   for (int i = 0 ; i < 3 ; i++) {
       oPatch.tc_norms[i] = normals[i];
    }


   CalcPositions();
   float eyeToVertexDist0 = distance(eye[0], WorldPos_CS_in[0]);
   float eyeToVertexDist1 = distance(eye[0], WorldPos_CS_in[1]);
   float eyeToVertexDist2 = distance(eye[0], WorldPos_CS_in[2]);
   gl_TessLevelOuter[0] = GetTessLevel(eyeToVertexDist1, eyeToVertexDist2);
   gl_TessLevelOuter[1] = GetTessLevel(eyeToVertexDist2, eyeToVertexDist0);
   gl_TessLevelOuter[2] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1);
   gl_TessLevelInner[0] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1);



}

vec3 getNormal(vec3 a, vec3 b, vec3 c)
{
    vec3 e1 = vec3(b - a);
    vec3 e2 = vec3(c - a);
    return normalize(cross(e1, e2));
}




void CalcPositions()
{
    // The original vertices stay the same
    oPatch.WorldPos_B030 = WorldPos_CS_in[0];
    oPatch.WorldPos_B003 = WorldPos_CS_in[1];
    oPatch.WorldPos_B300 = WorldPos_CS_in[2];

    // Edges are names according to the opposing vertex
    vec3 EdgeB300 = oPatch.WorldPos_B003 - oPatch.WorldPos_B030;
    vec3 EdgeB030 = oPatch.WorldPos_B300 - oPatch.WorldPos_B003;
    vec3 EdgeB003 = oPatch.WorldPos_B030 - oPatch.WorldPos_B300;

    // Generate two midpoints on each edge
    oPatch.WorldPos_B021 = oPatch.WorldPos_B030 + EdgeB300 / 3.0;
    oPatch.WorldPos_B012 = oPatch.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;
    oPatch.WorldPos_B102 = oPatch.WorldPos_B003 + EdgeB030 / 3.0;
    oPatch.WorldPos_B201 = oPatch.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;
    oPatch.WorldPos_B210 = oPatch.WorldPos_B300 + EdgeB003 / 3.0;
    oPatch.WorldPos_B120 = oPatch.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;

    // Project each midpoint on the plane defined by the nearest vertex and its normal
    oPatch.WorldPos_B021 = ProjectToPlane(oPatch.WorldPos_B021, oPatch.WorldPos_B030,
                                          oPatch.tc_norms[0]);
    oPatch.WorldPos_B012 = ProjectToPlane(oPatch.WorldPos_B012, oPatch.WorldPos_B003,
                                         oPatch.tc_norms[1]);
    oPatch.WorldPos_B102 = ProjectToPlane(oPatch.WorldPos_B102, oPatch.WorldPos_B003,
                                         oPatch.tc_norms[1]);
    oPatch.WorldPos_B201 = ProjectToPlane(oPatch.WorldPos_B201, oPatch.WorldPos_B300,
                                         oPatch.tc_norms[2]);
    oPatch.WorldPos_B210 = ProjectToPlane(oPatch.WorldPos_B210, oPatch.WorldPos_B300,
                                         oPatch.tc_norms[2]);
    oPatch.WorldPos_B120 = ProjectToPlane(oPatch.WorldPos_B120, oPatch.WorldPos_B030,
                                         oPatch.tc_norms[0]);

    // Handle the center
    vec3 Center = (oPatch.WorldPos_B003 + oPatch.WorldPos_B030 + oPatch.WorldPos_B300) / 3.0;
    oPatch.WorldPos_B111 = (oPatch.WorldPos_B021 + oPatch.WorldPos_B012 + oPatch.WorldPos_B102 +
                          oPatch.WorldPos_B201 + oPatch.WorldPos_B210 + oPatch.WorldPos_B120) / 6.0;
    oPatch.WorldPos_B111 += (oPatch.WorldPos_B111 - Center)/2 ;
}


vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, PlaneNormal);
    vec3 d = Len * PlaneNormal;
    return (Point - d);
}


float GetTessLevel(float dist1, float dist2)
{
	float avgDist = (dist1 + dist2) / 2;

	float actualTessLevel = 0.0f;

	float exponent = -lambda * avgDist;
	actualTessLevel = round(exp(exponent) * alpha);

	if(actualTessLevel < 1.0f)
		return 1.0f;

	return actualTessLevel;
}



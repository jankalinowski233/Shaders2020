#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;
//layout(triangles, fractional_even_spacing, ccw) in;
//layout(triangles, fractional_odd_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

// unifrom matrices to perform transformations
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D heightTexture;
uniform float scale;

// read in vector arrays from previous shader
in vec2 vsTexCoords[];
in vec3 posTC[] ;
in float tessLevel[];
in vec3 cameraPos[];

// pass along the interpolated values
out vec3 fragPos;
out vec2 tessTex;
out vec3 teNormal;
out float teScale;
out float visibility;

float density = 0.002f;
float G = 5.0f;

void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   fragPos = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   tessTex = interpolate2D(vsTexCoords[0], vsTexCoords[1], vsTexCoords[2]);

   float height = (texture(heightTexture, tessTex).x);
   fragPos.y = height * scale;
   teScale = scale;

   float fogDistance = distance(cameraPos[0], fragPos);
   visibility = exp(-pow((fogDistance * density), G));
   visibility = clamp(visibility, 0.0f, 1.0f);

   // calculate normals
   // leaving ivec2 at 1, as it looks much better than t/n
   float right = (textureOffset(heightTexture, tessTex, ivec2(1, 0)).r) * scale;
   float left = (textureOffset(heightTexture, tessTex, ivec2(-1, 0)).r) * scale;
   float up = (textureOffset(heightTexture, tessTex, ivec2(0, 1)).r) * scale;
   float down = (textureOffset(heightTexture, tessTex, ivec2(0, -1)).r) * scale;

   vec3 toNormalize = vec3((left-right), 2.0f, (up-down));
   teNormal = normalize(toNormalize);

   // transform vertex to clip space
   gl_Position =  projection * view * model * vec4(fragPos, 1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}


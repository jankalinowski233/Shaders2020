#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;
//layout(triangles, fractional_even_spacing, ccw) in;
//layout(triangles, fractional_odd_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;
vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2) ;

// unifrom matrices to perform transformations
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D heightTexture;
uniform float scale;
uniform float seed;

// read in vector arrays from previous shader
in vec2 vsTexCoords[];
in vec3 posTC[] ;
in float tessLevel[];
in vec3 cameraPos[];

// pass along the interpolated values
out vec3 fragPosTE;
out vec2 tessTex;
out vec3 teNormal;
out float teScale;
out float visibility;

float density = 0.006f;
float G = 5.0f;

float hash(float n)
{
	return fract(sin(n) * (753.3843f + seed));
}

float sNoise(float x, float y, float z)
{
	vec3 p = floor(vec3(x, y, z));
	vec3 f = fract(vec3(x, y, z));

	f = f * f * (3.0f - (2.0f * f));

	float n = p.x + p.y * 157.0f + 113.0f * p.z;

	return mix(mix(mix(hash(n), hash(n + 1.0f), f.x),
			mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
			mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x), mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

float octaves(vec3 pos, int count)
{
	float total = 0.0f;
	float maxAmplitude = 0.0f;

	float amplitude = 10000.0f;
	float frequency = 0.01f;

	for(int i = 0; i < count; i++)
	{
		float x = pos.x * frequency;
		float z = pos.z * frequency;
		total += sNoise(x, 0.1f, z) * amplitude;
		maxAmplitude += amplitude;

		frequency *= 2.0f;
		amplitude /= 2.0f;
	}

	return total / maxAmplitude;
}

void main()
{
   fragPosTE = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   tessTex = interpolate2D(vsTexCoords[0], vsTexCoords[1], vsTexCoords[2]);

   // sNoise noise height
   fragPosTE.y = octaves(fragPosTE, 15) * scale;
   teScale = scale;

   float fogDistance = distance(cameraPos[0], fragPosTE);
   visibility = exp(-pow((fogDistance * density), G));
   visibility = clamp(visibility, 0.0f, 1.0f);

   // calculate normals
   // leaving ivec2 at 1, as it looks much better than t/n
   float right = octaves(vec3(fragPosTE.x + 1.0f, fragPosTE.y, fragPosTE.z), 8) * scale;
   float left = octaves(vec3(fragPosTE.x - 1.0f, fragPosTE.y, fragPosTE.z), 8) * scale;
   float up = octaves(vec3(fragPosTE.x, fragPosTE.y, fragPosTE.z + 1.0f), 8) * scale;
   float down = octaves(vec3(fragPosTE.x, fragPosTE.y, fragPosTE.z - 1.0f), 8) * scale;

   vec3 toNormalize = vec3((left-right), 2.0f, (up-down));
   teNormal = normalize(toNormalize);

   // transform vertex to clip space
   gl_Position =  projection * view * model * vec4(fragPosTE, 1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2)
{
	return vec4(gl_TessCoord.x) * v0 + vec4(gl_TessCoord.y) * v1 + vec4(gl_TessCoord.z) * v2;
}


// first step of tesselation shader
// tesselation control shader add/deletes control points and determines the tesselatation level
// patch has three control points here (three vertices for each triangle)

#version 450 core
layout (vertices =3) out;

// vectors stored as arrays - each patch has three vertices, each with an xyz pos and xyz norm value 
//fragPos = position from Vertex Shader, posTC = position from this Tesselation Control shader

in vec3 fragPos[] ;
in vec2 texCoords[];

out vec3 posTC[] ;
out vec2 vsTexCoords[];
out float tessLevel[];
out vec3 cameraPos[];

uniform vec3 eyePos;
uniform float lambda;
uniform float alpha;

float GetTessellationLevel(float dist1, float dist2)
{
	float avgDist = (dist1 + dist2) / 2;

	float actualTessLevel = 0.0f;

	float exponent = -lambda * avgDist;
	actualTessLevel = exp(exponent) * alpha;

	if(actualTessLevel < 1.0f)
		return 1.0f;

	return actualTessLevel;
}

void main()
{
   float camToVertexDist1 = distance(eyePos, fragPos[1]);
   float camToVertexDist2 = distance(eyePos, fragPos[2]);
   tessLevel[gl_InvocationID] = GetTessellationLevel(camToVertexDist1, camToVertexDist2);

   cameraPos[gl_InvocationID] = eyePos;

   // gpu can calculate each control point in parallel
   // tesselation level same for entire patch so only need to set it once (for the first control point)
   // gl_invocation called for each control point
   if (gl_InvocationID==0)
   {
		   // Calculate the tessellation levels
          gl_TessLevelOuter[0] = GetTessellationLevel(camToVertexDist1, camToVertexDist2); 
          gl_TessLevelOuter[1] = gl_TessLevelOuter[0];
          gl_TessLevelOuter[2] = gl_TessLevelOuter[0];
          gl_TessLevelInner[0] = gl_TessLevelOuter[2]; 
   }

   // pass through position and tex coord information
   posTC[gl_InvocationID]  = fragPos[gl_InvocationID] ;
   vsTexCoords[gl_InvocationID] = texCoords[gl_InvocationID];

	
}
